"""
Django settings for spatiumvms project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os


from dotenv import load_dotenv
dotenv_path = os.path.abspath(os.path.join(os.path.dirname(__file__),"..",".env"))
load_dotenv(dotenv_path)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "spatiumvms")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(int(os.environ.get("DEBUG", 0)))

ALLOWED_HOSTS = []


HOSTS = os.environ.get("ALLOWED_HOSTS", "")

if HOSTS:
    ALLOWED_HOSTS.extend(HOSTS.split(","))



CORS_ALLOWED_ORIGINS = []

ALLOWED_ORIGINS = os.environ.get("CORS_ALLOWED_HOSTS")

if ALLOWED_ORIGINS:
    CORS_ALLOWED_ORIGINS.extend(ALLOWED_ORIGINS.split(","))


AUTH_USER_MODEL = 'authentication.CustomUser'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'authentication',
    'admin_panel',
    'corsheaders',
    'vms',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework',
    'ratelimit',
    'request_id',
    'django_guid',
    'rest_framework_roles',  # Must be after rest_framework
]

MIDDLEWARE = [
    'django_guid.middleware.guid_middleware',
    'request_id.middleware.RequestIdMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'spatiumvms.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

REST_FRAMEWORK_ROLES = {
  'ROLES': 'spatiumvms.roles.ROLES',
}

REST_FRAMEWORK = {
 # Use Django's standard `django.contrib.auth` permissions,
 # or allow read-only access for unauthenticated users.
 "DEFAULT_PERMISSION_CLASSES": [
    "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
 ],
    # Authentitcation
"DEFAULT_AUTHENTICATION_CLASSES": [
    "authentication.token_blacklist.token_utils.JWTAuthenticationWithBlackList",
 ],
 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 30
}

WSGI_APPLICATION = 'spatiumvms.wsgi.application'

ASGI_APPLICATION = 'jioevents.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get("DB_ENGINE", "django.db.backends.sqlite3"),
        'NAME': os.environ.get("DB_NAME", BASE_DIR / "events.sqlite3"),
        'USER': os.environ.get("DB_USER", None),
        'PASSWORD': os.environ.get("DB_PASSWORD", ""),
        'HOST': os.environ.get("DB_HOST", None),
        'PORT': os.environ.get("DB_PORT", None),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


STATIC_URL = "static/"
STATIC_ROOT = Path.joinpath(BASE_DIR, "staticfiles")

MEDIA_URL = "media/"
MEDIA_ROOT = Path.joinpath(BASE_DIR, "mediafiles")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

EMAIL_BACKEND=os.environ.get("EMAIL_BACKEND")
EMAIL_HOST=os.environ.get("EMAIL_HOST")
EMAIL_PORT=os.environ.get("EMAIL_PORT")
EMAIL_HOST_USER=os.environ.get("EMAIL_HOST_USER", None)
EMAIL_HOST_PASSWORD=os.environ.get("EMAIL_HOST_PASSWORD")
EMAIL_USE_TLS=os.environ.get("EMAIL_USE_TLS")
BREVO_API_KEY=os.environ.get("BREVO_API_KEY")
DEFAULT_FROM_EMAIL=os.environ.get("DEFAULT_FROM_EMAIL")

OTP_EXPIRY_TIME = 600


TOKEN_EXPIRY_TIME = 1

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=TOKEN_EXPIRY_TIME),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=3),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,

    "ALGORITHM": "HS256",
    "SIGNING_KEY": os.environ.get("SECRET_KEY", "secret"),
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JSON_ENCODER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("authentication.token_blacklist.token_utils.CustomAccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),

    "TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainPairSerializer",
    "TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSerializer",
    "TOKEN_VERIFY_SERIALIZER": "rest_framework_simplejwt.serializers.TokenVerifySerializer",
    "TOKEN_BLACKLIST_SERIALIZER": "rest_framework_simplejwt.serializers.TokenBlacklistSerializer",
    "SLIDING_TOKEN_OBTAIN_SERIALIZER": "rest_framework_simplejwt.serializers.TokenObtainSlidingSerializer",
    "SLIDING_TOKEN_REFRESH_SERIALIZER": "rest_framework_simplejwt.serializers.TokenRefreshSlidingSerializer",
}

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "request_id": {
            "()": "request_id.logging.RequestIdFilter"
        },
        'correlation_id': {
            '()': 'django_guid.log_filters.CorrelationId'
        }
    },
    "formatters": {
        "verbose": {
            "format": "{asctime} | [{levelname}] | {request_id} | {correlation_id} | {pathname} | {funcName} | {lineno} | {message}",
            "style": "{",
        },
    },
    "handlers": {
        "request_error": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "{}/{}".format(BASE_DIR, "logs/request_error.log"),
            "when": "D",
            "interval": 1,
            "backupCount": 7,
            "level": "ERROR",
            "formatter": "verbose",
            "filters": ["correlation_id", "request_id"],
        },
        "django_error": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "{}/{}".format(BASE_DIR, "logs/django_error.log"),
            "when": "D",
            "interval": 1,
            "backupCount": 7,
            "level": "ERROR",
            "formatter": "verbose",
            "filters": ["correlation_id", "request_id"],
        },
        "app_info": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "{}/{}".format(BASE_DIR, "logs/app_info.log"),
            "when": "D",
            "interval": 1,
            "backupCount": 7,
            "level": "INFO",
            "formatter": "verbose",
            "filters": ["correlation_id", "request_id"],
        },
        "app_error": {
            "class": "logging.handlers.TimedRotatingFileHandler",
            "filename": "{}/{}".format(BASE_DIR, "logs/app_error.log"),
            "when": "D",
            "interval": 1,
            "backupCount": 7,
            "level": "ERROR",
            "formatter": "verbose",
            "filters": ["correlation_id", "request_id"],
        },
    },
    "loggers": {
        "django": {
            "handlers": ["django_error"],
            "level": "ERROR",
            "propagate": True,
        },
        "django.request": {
            "handlers": ["request_error"],
            "level": "ERROR",
            "propagate": False,
        },
        "rest_framework": {
            "handlers": ["request_error"],
            "level": "ERROR",
            "propagate": False,
        },
        "app": {
            "handlers": ["app_info", "app_error"],
            "level": "INFO",
            "propagate": False,
        },
    },
}

APPLICATION_NAME = os.environ.get("APP_NAME", "Spatium Offices")
EMAIL_LOGO= os.environ.get("EMAIL_LOGO", "")
FRONT_DOMAIN= os.environ.get("FRONT_DOMAIN", "")

AUTHENTICATION_FLAG= os.environ.get("AUTHENTICATION_FLAG", "")